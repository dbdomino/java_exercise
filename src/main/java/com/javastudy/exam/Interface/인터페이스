인터페이스(interface)
- 추상 메서드의 집합, 구현된 것이 전혀 없는 설계도
- 두 대상(객체)간의 '연결, 대화, 소통'을 돕는 '중간 역할'을 말한다.
장점1- 무언갈 만드는데 있어 표준규격 또는 껍데기를 미리 선언하고, 이를 지켜서 규칙에 맞는 객체를 만들게 하기 위해 사용한다.(제약을 주는것 이기도 함)
그래서 구현 class가 많이 생성된다 해도 인터페이스가 바뀌지 않는다면, 이후 class들 유지보수 하는데 같은 메소드명으로 관리하므로 혼돈없이 편하게 수정 가능하다.
장점2- 선언과(인터페이스, 껍데기) 구현(class, 알맹이)를 분리시킨다. -> 수정시 알맹이만 수정하므로 변경에 유리하다. -> 유연한 코드, 느슨한 결합
장점3- 이후 수정시 개발 시간 단축 가능
장점4- 서로 관계없는 클래스들의 관계를 맺어줄 수 있다. 인터페이스 구현체로써 관계를 말한다.

사용자(유저) -> 자판기(인터페이스) -> 음료수 A(내용, 객체)
                               -> 음료수 B(내용, 객체)
                               -> 음료수 C(내용, 객체)
       유지보수시, 사용자가 자판기를 사용하는 부분은 건들필요없이, 자판기의 음료수만 바꿔주면 변경가능 - 사용자와 음료수의 느슨한 결합(아래보다 좀 느릴지라도 느슨한결합으로 유지보수 편함)
       자판기가 없으면, 사용자가 모든 음료수당 매핑시키고, 각각 연결 및 해제를 해줘야한다. - 사용자와 음료수의 직접결합(위보다 더 빠르겠지만 유지보수어려움)
--------------------------------------------------
class A {
    public void methodA (B b) {
        b.methodB();
    }
}
Class B {
    public void methodB() {
        sysout "methodB()";
    }
}
class InterfaceTest {
    public static void main(String args[]) {
        A a = new A();{
            A a = new A();
            a.methodA(new B()); // A에서 B와 직접 관계가 있음
        }
    }
}
이런식으로 인터페이스 없이 직접연결 이라면, B, C 또는 다른객체와 A와 연결시 A에 전부다 일일이 오버로딩으로 메시지 구현해줘야함.
------------------------------------------------
class A {
    public void methodB (I i) { // A는 B를 연결하는게아닌 I를 연결, I를 구현한 객체를 받겠다는 소리
        i.methodB();
    }
}
Interface I { void methodB(); }  // 추가된 I

class B implements I {
    public void methodB() {
        sysout "methodB()";
    }
}
class C implements I {
    public void methodB() {
        sysout "methodB() in C";
    }
}
이런식으로 인터페이스를 이용하면 B나 C를 구현하고 A에 적용시키는데 훨씬 유연해진다.
A는 methodB()를 지원하는 I의 구현체를 받아 사용하기 때문에, A에서 B 또는 C 또는 I를 구현한 모든 객체를 큰 변경없이 사용 가능해진다.
A는 I만 보고 호출한다 -> 캡슐화기능 지원, 구현된 객체의 iv를 직접 호출할 수 없게 하는것이 목표, 접근제어자로 private 걸어도 상관없도록.
----------------------------------

인터페이스의 접근제어자는 모두 public 이다.
interface 인터페이스 이름 {
    public static final 타입 상수이름 = 값;
    public abstract 메서드이름(매개변수목록);
}

인터페이스- 추상 메서드만 가지고 다른건 가지지않음
추상클래스- 생성자, 멤버변수, 같은것들에 추상메소드가 포함된 것

추상클래스 구현, 인터페이스 구현 모두 완성설계도를 구현하는 것이다.
