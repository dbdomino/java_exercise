배열 도 있지만
Arrays라는 클래스도 있다.
배열을 다루기 편리한 메서드(static) 제공

1. 배열의 출력  Arrays.toString(배열)
2. 배열의 복사  int[] arr = Arrays.copyOf(배열, 복사할길이) -> 새로운 배열을 만들어서 넣어줌, 복사할 길이 넘어가면 컴파일러가 기본값 넣음.
            int[] arr = Arrays.copyOfRange(배열, 시작위치, 끝위치) -> 특정 위치 만큼만 복사가능, 끝위치는 불포함
3. 배열 채우기 - fill(), setAll()
        int[] arr = new int[5];
        Arrays.fill(arr, 9);
        Arrays.setAll(arr, (i) -> (int)(Math.random()*5) + 1); // 난수 1부터 5까지 무작위로 배열에 등록 // arr = [1,5,2,5,1]
4. 배열 정렬과 검색 - sort() 오름차순정렬, binarySearch() 이진탐색
        int[] arr = {3, 2, 0, 1, 4};
        int index = Arrays.binarySearch(arr, 2); // index =-5 나옴, 잘못된결과, 이진탐색하려면 오름차순 정렬이 필수조건이라서 그럼
        Arrays.sort(arr); // 배열을 오름차순으로 정렬한다.
        System.out.println(Arrays.toString(arr));  // 배열 값 출력
        int idx = Arrays.binarySearch(arr, 2);      // idx = 2   올바른 결과
5. 다차원 배열의 출력 - deepToString()
        int[] arr = {0,1,2,3,4};
        int[][] arr2 = {{11,12}, {21,22}};  다차원 배열 출력 가능
        System.out.println(Arrays.toString(arr);       // [0, 1, 2, 3, 4]
        System.out.println(Arrays.deepToString(arr2);  // [[11, 12], [21,22]]
6. 다차원 배열의 비교 - deepEquals()
        int[][] arr2  = {{11,12}, {21,22}};
        int[][] arr22 = {{11,12}, {21,22}};

        System.out.println(Arrays.equals(arr2, arr22));  // false
        System.out.println(Arrays.deepEquals(arr2, arr22));  // true

7. 배열을 List로 변환 - asList(Object... a) 배열도 되고 값 여러개 넣어도 됨.
        List list = Arrays.asList(new Integer[]{1,2,3,4,5}); // list = [1,2,3,4,5]
        List list = Arrays.asList(1,2,3,4,5);                // list = [1,2,3,4,5]
        // List는 읽기 전용이다.
        list.add(6);  // 에러, UnsupportedOperationException 예외 발생 -> 지원하지 않는 기능 이란소리

        List lista = new ArrayList(Arrays.asList(1,2,3,4,5);
        lista.add(6); // 가능, 새로운 ArrayList 이므로 추가 가능함.

8. 람다와 스트림(14장) 관련, parallelXXX(), spliterator(), stream()

